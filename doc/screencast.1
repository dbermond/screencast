.\" screencast manpage
.TH screencast "1" "January 2025" "version 1.6.0.next" "User Commands"
.SH NAME
\fBscreencast\fR \- command line interface to record a X11 desktop
.SH SYNOPSIS
.nf
\fBscreencast\fR [\fIoptions\fR] <output>
\fBscreencast\fR [\fIoptions\fR] \fB\-u\fR
\fBscreencast\fR [\fIoptions\fR] \fB\-L\fR <URL>
.fi
.PP
The specified output filename must have an extension which in turn must be a
supported container format.
.SH DESCRIPTION
\fBscreencast\fR is a command line interface to record a X11 desktop using
FFmpeg, having support for offline recording and live streaming. It\'s
designed to make desktop recording a simple task, eliminating the somewhat
complex FFmpeg command line arguments and the need of multiple commands. It
uses predefined encoder settings that should be suitable for most needs. The
default settings provides a quick and affordable way to record the desktop and
is YouTube ready, letting the user to be focused on just specifying the
desired video size (resolution) and position. If the user doesn\'t want to
stick with the default settings, it is possible to choose among a set of
supported encoders and container formats.
.PP
\fBscreencast\fR not only provides an easy way to record your desktop, but it
also has options to automatically add some effects to the recordings, like
video fade\-in / fade\-out, text watermarking, webcam overlay  and volume
increase.
.SH OPTIONS
\fBOptions usage notes:\fR
.RS
.PP
The default setting will be used for any option that is not specified. You do
not need to specify an option if you want to use its default value.
.PP
Long options can be used with spaces or an equal sign (\'=\'). For example,
\fB\-\-fade \fIin\fR is the same as \fB\-\-fade\fR=\fIin\fR.
.PP
Short options cannot be combined in UNIX style. For example,
\'$ \fBscreencast \-unx\fI60\fR\' cannot be used and should be entered as
\'$ \fBscreencast \-u \-n \-x \fI60\fR\'.
.RE
.TP
\fB\-s\fR, \fB\-\-size\fR=\fIN\fRx\fIN\fR
.RS
The video size. This is actually the video resolution (width x height).
Combined with \fB\-p\fR option it will define a rectangular desktop area that
will be recorded. This rectangular area must be inside of the current screen
size/resolution (cannot be out of screen bounds).
.PP
Both the width and height specified in video size must a multiple of 8. This is
a requirement for \fIx265\fR, \fIkvazaar\fR, \fItheora\fR, \fIvp8\fR and
\fIvp9\fR video encoders. For \fIx264\fR, \fIh264_nvenc\fR and \fIhevc_nvenc\fR
video encoders this is actually not required, but it will avoid speedloss with
them.
.PP
default: 640x480
.RE
.TP
\fB\-p\fR, \fB\-\-position\fR=\fIN\fR,\fIN\fR
.RS
The screen position defining from where the recording will take place. These
are X and Y offsets from the screen top left corner. Combined with \fB\-s\fR
option it will define a rectangular desktop area that will be recorded. This
rectangular area must be inside of the current screen size/resolution (cannot
be out of screen bounds).
.PP
default: 0,0 (screen top left corner)
.RE
.TP
\fB\-d\fR, \fB\-\-display\fR=\fI:N\fR[\fI.N\fR]
.RS
The X server display where to record from. It can be also specified a screen
where to record from by adding a dot followed by the screen number (\fI.N\fR).
For example, a value of \fI:0.0\fR means display 0 and screen 0. If a screen
number is not specified, it will defaul to \fI0\fR in FFmpeg. Make sure to
specify display and screen numbers that are available on the system.
.PP
default: :0.0
.RE
.TP
\fB\-b\fR, \fB\-\-border\fR=\fIN\fR
.RS
Tickness of the screen region border delimiter. Valid values are \fI0\fR to
\fI128\fR. A value of \fI0\fR disables showing the border delimiter.
.PP
default: 2
.RE
.TP
\fB\-S\fR, \fB\-\-select\-region\fR
.RS
Select with mouse the screen region to record. Use a single mouse click to
select an entire window. Click and drag with mouse to select a region. When
dragging, use the arrow keys to fine tune. Right click or any other keystroke
to cancel. The \fB\-s\fR and \fB\-p\fR options cannot be used with this option.
.PP
The selected width and height must be a multiple of 8 (please see the \fB\-s\fR
option for details). It\'s hard to select a screen region that matches this
need with the currently used tool. To overcome this, if the width and height of
the selected region does not meet this requirement they will be automatically
changed to the immediately higher number that comply with this criteria. Note
that if these newly changed values are out of screen bounds \fBscreencast\fR
will not be able to record and will exit with error.
.RE
.TP
\fB\-r\fR, \fB\-\-fps\fR=\fIN\fR
.RS
Video framerate (frames per second \- fps).
.PP
default: 25
.RE
.TP
\fB\-f\fR, \fB\-\-format\fR=\fITYPE\fR
.RS
Container format of the output video. This option can be used only with the
\fB\-u\fR option (if you want to specify a container format when using
automatic output filename choosing). This option cannot be used when entering
an output filename. When not using the \fB\-u\fR option, the container format
needs to be specified directly in the output filename.
.PP
.nf
        default: mp4
supported types: mp4, mov, mkv, webm, ogg, ogv, flv, nut, wmv, asf, avi
.fi
.RE
.TP
\fB\-i\fR, \fB\-\-audio\-input\fR=\fINAME\fR
.RS
ALSA audio input device name. Make sure to have a working ALSA configuration,
for example, by having a properly configured \fI~/.asoundrc\fR file. To
determine possible audio input device names please see:
.nf
<https://trac.ffmpeg.org/wiki/Capture/ALSA>
.fi
.PP
Some special values that can be used:
.RS
.PP
\fInone\fR: audio will be disabled (video without audio, only video stream will
be present)
.PP
\fIdefault\fR: the default ALSA device
.PP
\fIpulse\fR: the default PulseAudio device
.RE
.PP
default: default
.PP
\fBnote:\fR the default audio recording backend used by \fBscreencast\fR is
ALSA. If your FFmpeg build has no support for ALSA, it will fallback to use
the PulseAudio backend (a warning message will be displayed), and in this case
you can use this option to specify a PulseAudio input source name. To
determine possible PulseAudio input source names you can use the \fBpactl\fR
utility (\'$ \fBpactl list sources\fR\').
.RE
.TP
\fB\-a\fR, \fB\-\-audio\-encoder\fR=\fINAME\fR
.RS
Audio encoder that will be used to encode the recorded audio. For details
about the special value \fInone\fR, please see the \fBREMARKS\fR section
bellow.
.PP
.nf
        default: aac
supported types: aac, opus, vorbis, mp3lame, shine, wma, none
.fi
.RE
.TP
\fB\-v\fR, \fB\-\-video\-encoder\fR=\fINAME\fR
.RS
Video encoder that will be used to encode the recorded video. If using a
hardware accelerated video encoder please make sure that you have a graphics
card that supports the specified encoder. Note that hardware accelerated video
encoders have additional requirements: NVENC requires NVIDIA drivers to be
installed, VAAPI requires libva and libdrm to be installed and QSV requires
Intel Media SDK to be installed. For details about the special value
\fInone\fR, please see the \fBREMARKS\fR section bellow.
.PP
.nf
        default: x264
supported types: x264, h264_nvenc, h264_vaapi, h264_qsv,
                 x265, kvazaar, svt_hevc, hevc_nvenc, hevc_vaapi, hevc_qsv,
                 vp8, vp8_vaapi, vp9, svt_vp9, vp9_vaapi, theora, wmv,
                 aom_av1, svt_av1, rav1e, none
.fi
.RE
.TP
\fB\-D\fR, \fB\-\-hw\-device\fR=\fIDEVICE\fR
.RS
Hardware device to use with a hardware video encoder. The device is specific
to each hardware type. For NVENC encoders, the device is the NVIDIA GPU number,
starting at \fI0\fR. For QSV encoders, the device is the MFX implementation
name, and allowed values are \fIhw\fR, \fIhw2\fR, \fIhw3\fR, \fIhw4\fR,
\fIhw_any\fR, \fIauto\fR, \fIauto_any\fR and \fIsw\fR (notice that modern
MFX/VPL do not support the software (\fIsw\fR) implementation). For VAAPI
encoders, the device is the DRM render node in the system. This option can be
used only when specifying a hardware accelerated video encoder with the
\fB\-v\fR option and cannot be used when selecting a software video encoder.
.PP
.nf
default values:

         NVENC: 0
           QSV: hw
         VAAPI: /dev/dri/renderD128
.fi
.RE
.TP
\fB\-e\fR, \fB\-\-fade\fR=\fITYPE\fR
.RS
Enable video fade effect, setting the fade type to \fITYPE\fR. When setted to
\fInone\fR the recorded video will have no fade effect.
.PP
.nf
        default: none
supported types: in, out, both, none
.fi
.RE
.TP
\fB\-m\fR, \fB\-\-volume\-factor\fR=\fIN\fR
.RS
Volume increase effect factor. This will increase the volume of the recorded
audio. Usually, audio volume is low with default settings, even if you
increse your microphone capture volume. Use this to give your videos a better
hearing experience, letting your viewers fell more confortable to watch it
whithout needing to rise their sound volume.
.PP
It works as a percentage factor. For example, a value of \fI1.5\fR will
increase volume by 50% and a value of \fI2.0\fR will double volume. It is also
possible to set a volume decrease effect, although this is not recommended
since for this you can simply decrease your microphone recording volume
(for example, a value of \fI0.5\fR will decrease volume by 50%).
.PP
This option can be used only when the \fB\-i\fR and \fB\-a\fR options are not
setted to \fInone\fR. When setted to \fI1.0\fR or \fI0.0\fR this effect is
disabled.
.PP
default: 1.0 (disabled)
.RE
.TP
\fB\-w\fR, \fB\-\-watermark\fR=\fITEXT\fR
.RS
Enable text watermark effect, setting the text to \fITEXT\fR. Although it is a
text, it is generated as a PNG image so it can be integrated in the video.
.PP
default: disabled
.RE
.TP
\fB\-z\fR, \fB\-\-wmark\-size\fR=\fIN\fRx\fIN\fR
.RS
Set text watermark size (resolution). Note that the generated image will be
trimmed to remove the unneeded transparent areas. As a result, the actual PNG
image that will be added to the video will have a slightly smaller size than
the one specified here. This option can be used only with the \fB\-w\fR option.
.PP
default: 255x35
.RE
.TP
\fB\-k\fR, \fB\-\-wmark\-position\fR=\fIPRE\fR, \fB\-\-wmark\-position\fR=\fIN\fR,\fIN\fR
.RS
Set text watermark position inside the video. This option can be used only with
the \fB\-w\fR option.
.PP
It accepts two types of values:
.RS
.PP
\fIN\fR,\fIN\fR: X and Y offsets from the video top left corner (not from the
screen)
.PP
\fIPRE\fR: a predefined special value
.RE
.PP
supported predefined special values: \fItopleft\fR/\fItl\fR,
\fItopright\fR/\fItr\fR, \fIbottomleft\fR/\fIbl\fR, \fIbottomright\fR/\fIbr\fR
.PP
default: bottomright
.RE
.TP
\fB\-c\fR, \fB\-\-wmark\-font\fR=\fINAME\fR
.RS
Set text watermark font to \fINAME\fR. To get a list of the available font
names for text watermarking on your system you can use the \fBmagick\fR
(ImageMagick) utility and execute this command: \'$ \fBmagick -list font\fR\'.
You can also specify a full filepath of a font file. This option can be used
only with the \fB\-w\fR option.
.PP
default: DejaVu-Sans
.PP
\fBnote:\fR if the default or setted font is not installed it will be auto chosen
.RE
.TP
\fB\-W\fR, \fB\-\-webcam\fR
.RS
Enable webcam overlay effect. Before recording with webcam you can adjust your
webcam settings like brightness, contrast and gamma correction with the
\fBv4l2\-ctl\fR utility (use \'$ \fBv4l2\-ctl \-L\fR\' to show available
values and \'$ \fBv4l2\-ctl \-c \fI<option>=<value>\fR\' to set values).
.PP
default: disabled
.RE
.TP
\fB\-I\fR, \fB\-\-webcam\-input\fR=\fIDEV\fR
.RS
Webcam input device, usually in the form of \fI/dev/videoN\fR. To list video
capture devices on your system you can use the \fBv4l2\-ctl\fR utility
(\'$ \fBv4l2\-ctl \-\-list\-devices\fR\'). This option can be used only with
the \fB\-W\fR option.
.PP
default: /dev/video0
.RE
.TP
\fB\-Z\fR, \fB\-\-webcam\-size\fR=\fIN\fRx\fIN\fR
.RS
Set webcam video size (resolution). To get a list of supported resolutions for
your webcam device you can execute \'$ \fBffmpeg \-f \fIv4l2 \fB\-list_formats
\fIall \fB\-i \fI<device>\fR\' or use the \fBv4l2\-ctl\fR utility
(\'$ \fBv4l2\-ctl \-\-list\-formats\-ext\fR\'). This option can be used only
with the \fB\-W\fR option.
.PP
default: 320x240
.RE
.TP
\fB\-P\fR, \fB\-\-webcam\-position\fR=\fIPRE\fR, \fB\-\-webcam\-position\fR=\fIN\fR,\fIN\fR
.RS
Set the webcam overlay position inside the video. This option can be used only
with the \fB\-W\fR option.
.PP
It accepts two types of values:
.RS
.PP
\fIN\fR,\fIN\fR: X and Y offsets from the video top left corner (not from the
screen)
.PP
\fIPRE\fR: a predefined special value
.RE
.PP
supported predefined special values: \fItopleft\fR/\fItl\fR,
\fItopright\fR/\fItr\fR, \fIbottomleft\fR/\fIbl\fR, \fIbottomright\fR/\fIbr\fR
.PP
default: topright
.RE
.TP
\fB\-R\fR, \fB\-\-webcam\-fps\fR=\fIN\fR
.RS
Set webcam framerate (fps). Please make sure that the specified framerate is
supported by your webcam device. To get a list of supported framerates for
your webcam device you can use the \fBv4l2\-ctl\fR utility
(\'$ \fBv4l2\-ctl \-\-list\-formats\-ext\fR\'). This option can be used only
with the \fB\-W\fR option.
.PP
default: device default
.RE
.TP
\fB\-L\fR, \fB\-\-live\-streaming\fR=\fIURL\fR
.RS
Do a live streaming to the server address specified in \fIURL\fR. Please make
sure to have a working connection to the specified server address and
sufficient upload bandwidth to send the data. Note that the higher the video
size (resolution) and framerate (fps), the higher will be the needed upload
bandwidth. Use the \fB\-K\fR option if you want to save a local copy of the
live streamed video. It uses a one step process (record and encode at the
same time). \fBscreencast\fR will record offline when this option is not
specified. It has been tested only with the \fIYouTube\fR live streaming
service. It is recommended to use a hardware accelerated video encoder with
this option.
.PP
Some restrictions apply:
.RS
.PP
can be used only with audio encoders: aac, mp3lame and shine
.PP
can be used only with video encoders: x264, h264_nvenc, h264_vaapi and
h264_qsv
.PP
can be used only with container formats (when saving the live streamed video
with \fB\-K\fR option): mp4, mov, mkv, flv, nut, wmv, asf and avi
.PP
cannot be used with fade effect (\fB\-e\fR option)
.PP
must be recorded with audio (\fB\-i\fR and \fB\-a\fR options cannot be setted to
\fInone\fR)
.RE
.PP
default: disabled
.RE
.TP
\fB\-1\fR, \fB\-\-one\-step\fR
.RS
Enable recording in a one step process (record and encode at the same time,
without a second encoding step). It will produce a larger video filesize,
take less time and require less CPU power when compared to recording in two
steps (CPU power comparison is when not using a hardware accelerated encoder).
Regarding to filesize and CPU power, this option affects only the \fIx264\fR,
\fIx265\fR and \fIkvazaar\fR video encoders. This option cannot be used with
fade effect (\fB\-e\fR option). This option is worth to be used with a
hardware accelerated encoder, like the NVENC or VAAPI ones, or when using
CPU\-intensive tasks accompanied by one of the affected software\-based
encoders that were mentioned (and not needing the fade effect). You do not
need to specify this option when doing a live streaming (\fB\-L\fR option)
because it already works in a one step process. Note that the default
\fBscreencast\fR behavior is to record in a two step process (1st step:
lossless recording. 2nd step: encoding).\fBThis option can cause buffer
problems that may lead to packet loss (most notably audio packet loss). It is
not recommended to use it with software-based video encoders.\fR
.PP
default: disabled
.RE
.TP
\fB\-x\fR, \fB\-\-fixed\fR=\fIN\fR
.RS
Set the video to have a fixed length of \fIN\fR seconds. When setted to \fI0\fR
this is disabled, meaning a indefinite video length that will be recorded until
the user stops it by presing the \fIq\fR key in the terminal window.
.PP
default: 0 (disabled)
.RE
.TP
\fB\-n\fR, \fB\-\-no\-notifications\fR
Disable desktop notifications. Desktop notifications are shown by default,
allowing a better visual control of the recording. Use this option to disable
them.
.TP
\fB\-g\fR, \fB\-\-png\-optimizer\fR=\fINAME\fR
.RS
Use PNG optimizer \fINAME\fR and \fIadvdef\fR (advancecomp) in the PNG image
generated by the \fB\-w\fR option that will be used as a text watermark. This
option is useful when you want to use a big text watermark in a big video,
allowing the video to be a bit smaller. Not really needed if using the default
watermark settings with a small text. When setted to \fInone\fR, PNG
optimization is disabled. This option can be used only with the \fB\-w\fR
option.
.PP
.nf
       default: none
supported ones: optipng, oxipng, opt\-png, truepng, pingo, none
.fi
.RE
.TP
\fB\-o\fR, \fB\-\-output\-dir\fR=\fIDIR\fR
.RS
Set the output video to be saved in \fIDIR\fR. This option can be used only
with the \fB\-u\fR option (if you want to specify a save directory when using
automatic output filename choosing). This option cannot be used when entering
an output filename. When not using the \fB\-u\fR option, the output directory
needs to be specified directly in the output filename.
.PP
default: the local directory
.RE
.TP
\fB\-t\fR, \fB\-\-tmp\-dir\fR=\fIDIR\fR
.RS
Set temporary files to be placed in \fIDIR\fR. By default, the
\fI${XDG_CACHE_HOME}/screencast\fR directory will be used for temporary files
(which usually points to \fI${HOME}/.cache\fR on most systems). If the
\fI$XDG_CACHE_HOME\fR environment variable is not set, it will default to
\fI${HOME}/.screencast\fR. Make sure to have enough free space in the
specified directory.
.PP
default: \fI${XDG_CACHE_HOME}/screencast\fR (\fI${HOME}/.screencast\fR if the
\fI$XDG_CACHE_HOME\fR environment variable is not set)
.RE
.TP
\fB\-K\fR, \fB\-\-keep\fR
.RS
When recording offline, it will keep (don\'t delete) the temporary video in
the temporary directory. When doing a live streaming, it will keep (save) a
copy of the live streamed video in the output directory.
.RE
.TP
\fB\-u\fR, \fB\-\-auto\-filename\fR
.RS
Auto choose output filename based on date and time. The output filename will
have the following format:
.PP
screencast\-YEAR\-MONTH\-DAY_HOUR.MINUTE.SECOND.FORMAT
.RE
.TP
\fB\-l\fR, \fB\-\-list\fR
List arguments supported by these options.
.TP
\fB\-h\fR, \fB\-\-help\fR
Help screen.
.TP
\fB\-V\fR, \fB\-\-version\fR
Show program version information.
.SH EXAMPLES
Use all default settings, specifying filename of the output video:
.RS
.PP
$ \fBscreencast\fR myvideo.mp4
.RE
.PP
Use default settings for a 1280x720 video from screen positon 200,234 (with
auto chosen output filename, default 'mp4' format):
.RS
.PP
$ \fBscreencast\fR \fB\-s\fR 1280x720 \fB\-p\fR 200,234 \fB\-u\fR
.RE
.PP
Changing just the container format without specifying encoders will make it to
auto choose them if needed. In this case, the \'webm\' format will produce a
video with \'opus\' and \'vp9\' encoders:
.RS
.PP
$ \fBscreencast\fR /home/user/webmvideos/myvideo.webm
.RE
.PP
Use hardware accelerated video encoders:
.RS
.PP
NVENC HEVC:
.RS
.PP
$ \fBscreencast\fR \fB-u\fR \fB-v\fR hevc_nvenc
.RE
.PP
VAAPI VP9 using the defafult DRM render node (/dev/dri/renderD128):
.RS
.PP
$ \fBscreencast\fR \fB-u\fR \fB-v\fR vp9_vaapi
.RE
.PP
VAAPI H.264 using the defafult DRM render node (/dev/dri/renderD128):
.RS
.PP
$ \fBscreencast\fR \fB-u\fR \fB-v\fR h264_vaapi
.RE
.PP
VAAPI H.264 using the DRM render node /dev/dri/renderD129:
.RS
.PP
$ \fBscreencast\fR \fB-u\fR \fB-v\fR h264_vaapi -A /dev/dri/renderD129
.RE
.RE
Live streaming:
.RS
.PP
Live streaming only, without saving a local output video:
.RS
.PP
$ \fBscreencast\fR \fB-L\fR <URL> \fB-v\fR h264_vaapi
.RE
.PP
Live streaming and also saving a copy to a local output video (with auto
chosen output filename, default 'mp4' format):
.RS
.PP
$ \fBscreencast\fR \fB-L\fR <URL> \fB-v\fR h264_nvenc \fB-K\fR \fB-u\fR
.RE
.RE
.PP
1280x720 video from screen positon 200,234 , 30 fps, \'mp3lame\' audio encoder,
\'x265\' video encoder, \'mkv\' container format, fade\-in video effect,
volume increase effect of 50%, small text watermark effect in bottom right
video corner (using the default values for watermark size, position and font)
and webcam overlay effect at top right video corner (using the default values
for webcam input, size, position and framerate):
.RS
.PP
$ \fBscreencast\fR \fB\-s\fR 1280x720 \fB\-p\fR 200,234 \fB\-r\fR 30 \fB\-a\fR
mp3lame \fB\-v\fR x265 \fB\-e\fR in \fB\-m\fR 1.5 \fB\-w\fR www.mysitehere.com
\fB-W\fR myvideo.mkv
.RE
.PP
\fINOTE\fR:
.PP
When not using the \fB\-x\fR option, press the \fBq\fR key in terminal window
to end the recording.
.SH REQUIREMENTS
The minimum requirements are a POSIX\-compatible shell, a running X session, a
recent \fIFFmpeg\fR version and \fIxdpyinfo\fR. It\'s advised to use
\fIFFmpeg\fR version git master. \fIFFmpeg\fR needs to be compiled with
support for x11grab (libxcb) and the desired encoders and muxers/formats.
When recording offline in the default two step process behavior
(see \fBREMARKS\fR), \fIFFmpeg\fR needs to be compiled with support for ffv1
encoder, ffv1 decoder, matroska muxer and matroska demuxer (\fBscreencast\fR
will try to auto\-fallback to ffvhuff or huffyuv encoder/decoder if ffv1 is
not supported and to nut muxer/demuxer if matroska is not supported, but ffv1
and matroska are preferred). When live streaming, \fIFFmpeg\fR needs to be
compiled with support for flv muxer.
.PP
When recording audio (\fB\-i\fR and \fB\-a\fR options not setted to
\fInone\fR), \fIFFmpeg\fR must have been compiled with support for ALSA
demuxer (\fBscreencast\fR will try to auto\-fallback to PulseAudio demuxer if
ALSA is not supported, but ALSA is preferred). \fIarecord\fR (alsa\-utils)
will be required for ALSA when specifying a short or long ALSA input device
name with the \fB\-i\fR option. If the PulseAudio demuxer is being used in the
described auto\-fallback situation, \fIpactl\fR will be required when
specifying a PulseAudio input source name with with the \fB\-i\fR option. When
using webcam overlay effect (\fB\-W\fR option), \fIFFmpeg\fR must have been
compiled with support for Video4Linux2.
.PP
\fInotify\-send\fR (libnotify) is needed for desktop notifications. Note that
desktop notifications are enabled by default. They can be disabled by using
the \fB\-n\fR option, eliminating the need of \fInotify\-send\fR. Running
\fBscreencast\fR in a system without \fInotify\-send\fR and without using the
\fB\-n\fR option will result in error.
.PP
\fBscreencast\fR will try to play a sound notification when the
recording/encoding process is finished. For this, it will use \fIFFplay\fR and
a sound file from the freedesktop sound theme (usually a package called
\fIsound\-theme\-freedesktop\fR in most Linux distributions). Although not a
requirement, they are recommended to be installed for a better user
experience. Note that \fIFFplay\fR must have been compiled with support for
ogg demuxer and libvorbis (or vorbis) decoder in order to play the needed
sound file.
.PP
Other requirements are needed according to additional options that may be
specified by the user:
.RS
.PP
\fIslop\fR is needed for selecting the screen region with mouse
(\fB\-S\fR option).
.PP
\fIFFprobe\fR is needed for video fade effect (\fB\-e\fR option).
.PP
\fIImageMagick\fR is needed for text watermark effect (\fB\-w\fR option). Both
IM6 and IM7 are supported, but IM7 is preferred.
.PP
At least one supported PNG optimizer and \fIadvdef\fR (advancecomp) are needed
for PNG (watermark) optimization (\fB\-g\fR option).
.RE
.SH REMARKS
\fBscreencast\fR is written in pure POSIX shell code and has been tested in
bash, dash, yash, ksh and zsh.
.PP
When recording offline, the default \fBscreencast\fR behavior is to use a two
step process: firstly the audio and video are recorded to a lossless format,
and at a second step it is encoded to produce the final output video. That\'s
why you see a desktop notification saying \'encoding...\'. This mechanism
produces a better video, avoids problems and allows to use fade effect. When
live streaming or when using the \fB\-1\fR/\fB\-\-one\-step\fR option,
\fBscreencast\fR uses a one step process, with recording and encoding at the
same time. Note that the \fB\-1\fR/\fB\-\-one\-step\fR option is not
recommended to be used with software-based video encoders, since it can cause
buffer problems that may lead to packet loss (most notably audio packet loss).
.PP
The \fB\-a\fR/\fB\-\-audio\-encoder\fR and \fB\-v\fR/\fB\-\-video\-encoder\fR
options have both a special value of \fInone\fR. Setting \fB\-a\fR \fInone\fR
and \fB\-v\fR \fInone\fR at the same time will make \fBscreecast\fR to record
a lossless video in a one step process. No encoding step will be made and the
resulting video will be lossless. The \fB\-1\fR/\fB\-\-one\-step\fR option
will be automatically setted in this situation, as there is no second encoding
step to be made. Only the \fImkv\fR and \fInut\fR container formats are
supported when recording in this lossless way. Note: \fB\-a\fR \fInone\fR can
be used only with \fB\-v\fR \fInone\fR, and \fB\-v\fR \fInone\fR can be used
only with \fB\-a\fR \fInone\fR (they must be specified in conjuntion, or it
can be setted \fB\-v\fR \fInone\fR and \fB\-i\fR \fInone\fR if wanting to a
record a video without audio input).
.PP
When using \fIaac\fR audio encoder (which is the default setting),
\fBscreencast\fR will check if the detected FFmpeg build has support for
libfdk_aac and use it if present, otherwise it will use the FFmpeg built\-in
AAC audio encoder. Make sure to have a recent FFmpeg version as older versions
do not support the built\-in AAC audio encoder without being experimental, or
do not support it at all.
.PP
FFmpeg encoder names have the \'lib\' prefix removed for simplicity. For
example, libx264 is called \fIx264\fR in this program.
.PP
For vorbis and opus audio, FFmpeg has both an external library encoder (named
\'libvorbis\' and \'libopus\' encoders) and a native built\-in encoder (named
\'vorbis\' and \'opus\' encoders). Although the \fIvorbis\fR and \fIopus\fR
audio encoders are mentioned in the options, it is made this way just for
simplicity as stated right above. When the user selects the \fIvorbis\fR or
\fIopus\fR audio encoder, \fBscreencast\fR uses respectively the FFmpeg
libvorbis or libopus encoder, which has a much superior quality than the FFmpeg
native built\-in vorbis and opus encoders.
.PP
The \fImkv\fR and \fInut\fR container formats are the only ones that support a
combinantion of all audio and video encoders. All other container formats have
restrictions. \fBscreencast\fR will exit with error if an unsupported encoder
is chosen for a given container format. For example, you cannot use the
\fIaac\fR audio encoder with \fIwebm\fR container format.
.PP
When using the \fImp4\fR container format, the moov atom will be automatically
moved to the beginning of the output video file. This is the same as running
\fIqt\-faststart\fR in the output video and is useful for uploading to
streaming websites like \fIYouTube\fR.
.PP
The default settings for container format and audio/video encoders will produce
a video that is ready to be uploaded to \fIYouTube\fR.
.SH LIMITATIONS
It has been reported that \fBscreencast\fR does not work under Wayland. This is
a FFmpeg limitation, since FFmpeg currently does not support recording Wayland
sessions.
.SH BUGS
None are known at the moment.
.SH AUTHOR
Daniel Bermond < gmail\-com: danielbermond >
.PP
<https://github.com/dbermond/screencast/>
.SH COPYRIGHT
Copyright \(co 2015\-2025 Daniel Bermond
.SH LICENSE
GNU General Public License as published by the Free Software Foundation, either
version 2 of the License, or (at your option) any later version.
<http://www.gnu.org/licenses/>
.SH SEE ALSO
ffmpeg(1)
